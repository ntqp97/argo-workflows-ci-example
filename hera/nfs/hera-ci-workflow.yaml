apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  annotations:
    workflows.argoproj.io/description: 'A basic CI leveraging Argo Workflows.


      The Workflow...


      * pulls a repo from git. Specifically pulling a branch based on a pull request;

      * merges the target branch into it;

      * modifies the html that will be copied into the container to inject the unique
      name of the running workflow;

      * builds a container from a Dockerfile and pushes to a registry;

      * deploys an Argo CD application that uses the newly-built container to deploy
      a static website.


      It does not pretend to be a definitive example, but it aims to inspire. In order
      to make this a semi-usable example, we have cut a number of security corners.
      Please don''t just blindly run this in production.

      '
    workflows.argoproj.io/maintainer: Pipekit Inc
    workflows.argoproj.io/maintainer_url: https://github.com/pipekit/argo-workflows-ci-example
    workflows.argoproj.io/version: '>= 3.3.6'
  name: hera-ci-workflow
  namespace: argo
spec:
  arguments:
    parameters:
    - name: app_repo
      value: ''
    - name: git_branch
      value: ''
    - name: target_branch
      value: ''
    - name: container_tag
      value: ''
    - name: container_image
      value: ''
    - name: dockerfile
      value: ''
    - name: path
      value: ''
  entrypoint: main
  templates:
  - name: delete-application
    resource:
      action: delete
      manifest: "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n\
        \  name: final-application\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\n\
        \  namespace: argocd\nspec:\n  destination:\n    namespace: final-application\n\
        \    server: 'https://kubernetes.default.svc'\n  project: default\n  source:\n\
        \    path: bootstrap/final-application\n    repoURL: 'https://github.com/pipekit/argo-workflows-ci-example.git'\n\
        \    targetRevision: HEAD\n  syncPolicy:\n    automated:\n      prune: true\n\
        \      selfHeal: true\n    syncOptions:\n      - PrunePropagationPolicy=background\n\
        \      - PruneLast=true\n      - CreateNamespace=true\n"
  - dag:
      tasks:
      - name: git-checkout
        templateRef:
          name: hera-git-checkout-pr
          template: main
      - depends: git-checkout
        name: html-modifier
        templateRef:
          name: hera-html-modifier
          template: main
      - depends: html-modifier
        name: container-build
        templateRef:
          name: hera-container-build
          template: main
      - depends: container-build
        name: deploy-application
        templateRef:
          name: hera-deploy-application
          template: main
      - depends: deploy-application.Failed
        name: delete-application
        template: delete-application
    name: main
  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 1Gi
      storageClassName: nfs
  volumes:
  - emptyDir: {}
    name: container-build
